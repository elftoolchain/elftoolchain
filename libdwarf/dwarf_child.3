.\" Copyright (c) 2010 Kai Wang
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\" $Id$
.\"
.Dd March 19, 2010
.Os
.Dt DWARF_CHILD 3
.Sh NAME
.Nm dwarf_child ,
.Nm dwarf_siblingof ,
.Nm dwarf_offdie
.Nd retrieve the debugging infomation entry descriptor
.Sh LIBRARY
.Lb libdwarf
.Sh SYNOPSIS
.In libdwarf.h
.Ft int
.Fo dwarf_child
.Fa "Dwarf_Die die"
.Fa "Dwarf_Die *ret_die"
.Fa "Dwarf_Error *err"
.Fc
.Ft int
.Fo dwarf_siblingof
.Fa "Dwarf_Debug dbg"
.Fa "Dwarf_Die die"
.Fa "Dwarf_Die *ret_die"
.Fa "Dwarf_Error *err"
.Fc
.Ft int
.Fo dwarf_offdie
.Fa "Dwarf_Debug dbg"
.Fa "Dwarf_Off offset"
.Fa "Dwarf_Die *ret_die"
.Fa "Dwarf_Error *err"
.Fc
.Sh DESCRIPTION
These functions are used to retrieve
.Vt Dwarf_Die
descriptor of debugging information entries.
.Pp
Function
.Fn dwarf_child
retrieves the first child of
.Vt Dwarf_Die
descriptor
.Ar die ,
and stores it in
.No \&* Ns Va ret_die .
.Pp
Function
.Fn dwarf_siblingof
retrieves the sibling of
.Vt Dwarf_Die
descriptor
.Ar die ,
and stores it in
.No \&* Ns Va ret_die .
If
.Ar die
is NULL, the first
.Vt Dwarf_Die
descriptor of the current compilation unit will be returned.
Combined with
.Fn dwarf_child ,
these two functions can be used to traverse the list of
.Vt Dwarf_Die
descriptors of the current compilation unit.
.Pp
Function
.Fn dwarf_offdie
retrieves the
.Vt Dwarf_Die
descriptor for the debugging information entry located at offset
.Va offset
of the .debug_info section.
.Sh RETURN VALUES
These functions return the following values:
.Bl -tag -width ".Bq Er DW_DLV_NO_ENTRY"
.It Bq Er DW_DLV_OK
This return value indicates a successful return.
.It Bq Er DW_DLV_ERROR
The operation failed.
.It Bq Er DW_DLV_NO_ENTRY
Child or sibling of
.Vt Dwarf_Die
descritpor
.Va die
does not exist or there is no dwarf debugging entry exist at given
.Va offset .
.El
.Sh ERRORS
These functions may fail with the following errors:
.Bl -tag -width ".Bq Er DW_DLE_DIE_NO_CU_CONTEXT"
.It Bq Er DW_DLE_ARGUMENT
Argument
.Va dbg
was NULL.
.It Bq Er DW_DLE_ARGUMENT
Arguments
.Va die
or
.Va ret_die
were NULL.
.It Bq Er DW_DLE_NO_ENTRY
Child or sibling of
.Vt Dwarf_Die
descritpor
.Va die
does not exist or there is no dwarf debugging entry does at given
.Va offset .
.It Bq DW_DLE_DIE_NO_CU_CONTEXT
There is no compilation unit context associated with
.Vt Dwarf_Debug
descriptor
.Va dbg .
.El
.Sh EXAMPLES
To retrieve the first
.Vt Dwarf_Die
descriptor and all its children, of the first compilation unit:
.Bd -literal
	Dwarf_Debug dbg;
	Dwarf_Die die, die0;
	Dwarf_Error de;

	\&... allocate dbg using dwarf_init() etc ...

	if (dwarf_next_cu_header(dbg, NULL, NULL, NULL, NULL, NULL, &de) !=
	    DW_DLV_OK)
		errx(1, "dwarf_next_cu_header: %s", dwarf_errmsg(de));

	/* Get the first DIE */
	die = NULL;
	if (dwarf_siblingof(dbg, die, &die0, &de) != DW_DLV_OK)
		errx(1, "dwarf_siblingof: %s", dwarf_errmsg(de));

	/* Get the first child of this DIE. */
	die = die0;
	if (dwarf_child(die, &die0, &de) != DW_DLV_OK)
		errx(1, "dwarf_child: %s", dwarf_errmsg(de));

	/* Get the rest of children. */
	do {
		die = die0;
		if (dwarf_siblingof(dbg, die, &die0, &de) == DW_DLV_ERROR)
			errx(1, "dwarf_siblingof: %s", dwarf_errmsg(de));
	} while (die0 != NULL);
.Ed
.Sh SEE ALSO
.Xr dwarf 3 ,
.Xr dwarf_next_cu_header 3
